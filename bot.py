import os
import asyncio
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery

from dotenv import load_dotenv
load_dotenv()

# ==== –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ====
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ü–æ–ª–æ–∂–∏ TELEGRAM_BOT_TOKEN –≤ .env –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")

bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# ==== —Å–æ—Å—Ç–æ—è–Ω–∏—è ====
class Form(StatesGroup):
    gender = State()
    source = State()

def kb_gender() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω–∞", callback_data="g_male")],
        [InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω–∞", callback_data="g_female")],
    ])

def kb_source() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç –¥—Ä—É–∑–µ–π", callback_data="s_friends")],
        [InlineKeyboardButton(text="–ò–∑ –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤", callback_data="s_channels")],
    ])

# ==== —Ö–µ–Ω–¥–ª–µ—Ä—ã ====
@router.message(CommandStart())
async def start(msg: Message, state: FSMContext):
    await msg.answer("–í–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç <b>–ù–∏–∫–∞</b> –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ‚Ä¶\n–ó–∞–≥—Ä—É–∂–∞—é—Å—å‚Ä¶")
    await asyncio.sleep(5)  # –ø–∞—É–∑–∞ –∫–∞–∫ –≤ –±–ª–æ–∫–µ ¬´–ó–∞–¥–µ—Ä–∂–∫–∞¬ª
    await state.set_state(Form.gender)
    await msg.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{msg.from_user.first_name or '–¥—Ä—É–≥'}</b>!\n"
        "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è ü§ó\n–ö–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?",
        reply_markup=kb_gender()
    )

@router.callback_query(Form.gender, F.data.startswith("g_"))
async def gender_chosen(call: CallbackQuery, state: FSMContext):
    gender = call.data.split("_", 1)[1]   # male / female
    await state.update_data(gender=gender)
    await call.message.edit_reply_markup()
    await state.set_state(Form.source)
    await call.message.answer("–°—É–ø–µ—Ä! –ö–∞–∫ —Ç—ã –æ –Ω–∞—Å —É–∑–Ω–∞–ª?", reply_markup=kb_source())

@router.callback_query(Form.source, F.data.startswith("s_"))
async def source_chosen(call: CallbackQuery, state: FSMContext):
    source = call.data.split("_", 1)[1]   # friends / channels
    data = await state.update_data(source=source)
    await call.message.edit_reply_markup()

    gender_txt = "–ú—É–∂—á–∏–Ω–∞" if data["gender"] == "male" else "–ñ–µ–Ω—â–∏–Ω–∞"
    source_txt = "–û—Ç –¥—Ä—É–∑–µ–π" if source == "friends" else "–ò–∑ –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"

    await call.message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! üî•\n<i>–ü–æ–ª</i>: {gender_txt}\n<i>–ò—Å—Ç–æ—á–Ω–∏–∫</i>: {source_txt}\n\n"
        "–°–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã."
    )
    await state.clear()

# ==== –∑–∞–ø—É—Å–∫ ====
def main():
    import logging
    from dotenv import load_dotenv
    load_dotenv()
    logging.basicConfig(level=logging.INFO)
    asyncio.run(dp.start_polling(bot))

if __name__ == "__main__":
    main()
